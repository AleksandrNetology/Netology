-----    Изменение истории -----

> git commit --ammend  - комманда для изменения последнего коммита. С её помощью можно отредактировать 
							либо комментарий последнего коммита, либо состав - включив или исключив из него какие-то файлы.
							Помним, что подобные правки меняют последний коммит, а значит появляет новый, вместо прежнего!
							Это значит, что подобные изменения можно делать только в локальном репозитории, до его пуша? 
							либо в своей личной ветке!

> git rebase -i HEAD~3  - сделать ребейс на свою ветку, для исключения части коммитов.
Например, если вести свою отдельную ветку, со множеством мелких и не очень коммитов, а потом пришло время вмержить её с ветку main
основного проекта. Чтобы в общей истории не сохранилась эта тьма мелких и не нужных коммитов, их можно схлопнуть до одного коммита,
сделав мерж своей ветки на саму себя и включив в него все коммиты.

Команда выше, как раз и делает интерактивный {-i} мерж начиная с HEAD и до третьего предка от HEAD.						

Вот пример:							
pick 5e97229 Update readme.md			# коммиты перечислены в обратной последовательности, т.е. так, как их дельты (diff) 
pick f518dc2 Update readme.md			# будут применяться по время ребейса. При ребейсе, git вычисляет разницу каждого коммита относительно
pick 22988dc Stash, clean, ^, ~			# предыдущего и начинает их применять поверх того коммита, который мы ему указали, как базовый

# Список возможных применяемых к коммитам команд - git всегда указывает ниже.
# Рассморим некоторые:

p или pick - означет, кто коммит будет использоваться без каких либо изменений, as is. Обязательно должен быть хоть один!
e или edit - остановится на указанном  коммите для применения git commit --amend
s или squash - объединить несколько коммитов в один. Объединяет стоящий выше в списке коммит с тем, что отмечем squash							
							



-----   Разбиение коммитов. -----
Предназначено для разделения последнего коммита на несколько.

Это можно сделать в процессе ребейса ветки самой на себя - см. выше. Когда мы вместо, например, pick, указываем edit.
Тогда в этом месте git останавливается  и мы можем сделать разделение коммита.

Как это делается?

> git reset HEAD^ - отменяет _последний_ коммит и теперь его можно сделать заново
> git add <file_name> - например мы добавляем файл
> git commit -m 'updated readme' - коммитим изменённый или новый файл
> git add <file_name> - добавляем\изменяем ещё один
> git commit -m 'added new'	- коммитим второй файл
> git rebase --continue  - продолжаем делать rebase							

! Важно, что после rebase изменения не пушатся без ключа --force
> git push --force

!По умолчанию git push запрещено вносить изменения в историю.!
							
-----   Инструмент filter-branch -----

Этот инструмент позволяет пройти по абсолютно всей истории коммитов и внести изменения.

Пример:
> git filter-branch --tree-filter 'rm -f *.bak'  - эта комманда идёт по всему дереву коммитов, ищет файлы 
													по указанному шаблону в каждом коммите и удаляет их.
													Если файл не найден, то ошибки нет - просто идём дальше, к след. коммиту.

Получается, что git изменяет огромное количество коммитов, а значит и меняются их хэши, а следовательно и хеши родителей.

Изменяем корневую директорию провекта:
> git filter-branch --subdirectory-filter <другая_корневая_папка> HEAD 


Глобальное изменения e-mail:
> git filter-branch --commit-filter '
		if ["$GIT_author_email"="name@domain.com"];
		then
			GIT_author_name="Name Surmane";
	GIT_author_name="name@another-domain.com";
			git commit-tree "$@";
		else
			git commit-tree "$@";
		fi' HEAD
		
--- Отмена слияния ---
Способ 1.

Например, надо откатить merge-commit:
> git reset --hard HEAD~  - это означет, что мы хотим откатится на предка коммита HEAD и удалить ошибочный мерж-коммит
Так можно сделать локально, т.е. до отправки своих изменений в удалённый репозиторий.

Способ 2.
> git revert <hash> - делает обратный коммит к любому коммиту. Т.е. мы можем отметить вообще любой коммит!
Чтобы отменить мерж-коммит, эта комманда будет выглядеть так:
> git revert -m 1 HEAD - т.е.


