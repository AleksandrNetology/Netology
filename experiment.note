Merge vc ReBase

---------- Merge ----------

		  [experiment]
				|
			->{c4}->
		  /			 \
{c1}-->{c2}-->{c3}-->{c5}
					   |
					 [main]

В merge надо решать возникающие конфликты.
ReBase позволяет этого избегать.

---------- ReBase ----------
	
		   ->{_c4}   [experiment]
		  /			   |
{c1}-->{c2}-->{c3}-->{c4'}
				|
			  [main]

> git checkout experiment  -- перейти на нужную ветку
> git rebase main -- измени базу ветки [experiment] на последний коммит ветки [main]

Происходит изменение _базы_ коммита {с4} с {с2} на {с3} и получается новый коммит {c4'}!

Принципиальное отличие rebase от merge состоит в том, что коммиты {c4} и {c4'} - это разные
коммиты, с разными контрольными суммами и хэшами.

! Как это работает: 
! git вычисляет разницу (diff) между коммитами {с2} и {с4}, а затем эту разницу
! применит к коммиту {с3}. В результате и получится коммит {c4'}.

Далее:

> git checkout main
> git merge experiment

Получается вот такая схема:

					[experiment]
					   |
{c1}-->{c2}-->{c3}-->{c4'}
					   |
					  [main]
					  
--------------------------------------------------------------------------------------
О сложных ReBase.

Схема для задачи ниже:

					 [main]
					   |
{c1}-->{c2}-->{c5}-->{c6}	
		  \	
			->{c3}-->{c4}-->{c10}
				\			  |
				 \			[server]
				  \
				   ->{c8}-->{c9}
							 |
							[client]
							
Исходные данные:
	Работая в ветке [main], нам потребовалось внести измения в некую задачу.
	Задача состоит из 2х частей: для клиентской и серверной частей нашей проги.
	Создаём ответвление [server] от коммита {c2} ветки [main] для серверной части.
	Создаём ответвление [client] от коммита {c3} ветки [server] для клиентской части.
	
	Нам необходимо применить на ветку [main] только изменения ветки [client] коммитов {с9} и {с10},
	а коммиты {с3}, {с4} и {с10} не применять к основной ветке.
	
	Как это сделать?
	
	С помощью merge этого не сделать, т.к. в этом случае к ветке [main] применятся только коммиты 
	{c9}, {c8} и {с3}, коммиты {с4} и {с10} будут потеряны.
	
	Используем rebase.

> git rebase --onto main server client -> ключ '--onto' принимает 3 параметра и этокоманда означает:
					переключиться на ветку [client], найди изменения относительно ветки [server]
					(это коммиты {c8} и {c9}) и примени эти изменения на ветку [main]. См. схему ниже.
		
Схема:	
					 [main]
					   |
{c1}-->{c2}-->{c5}-->{c6}-->{c8'}-->{c9'}	
		  \							  |
		   \						[client]
			->{c3}-->{c4}-->{c10}
				\			  |
				 \			[server]
				  \
				   ->{_c8}-->{_c9}
							 
!Помним, что коммиты {с8}<>{c8'} и {c9}<>{c9'}!

Далее, надо, например, сделать rebase ветки [server] на ветку [main].
Это можно сделать следующей командой не переключаясь на ветку [server]:
> git rebase <base_branch> <topic_branch> , где base_branch = main и topic_branch = server

В конце всего мероприятия, для пущей красоты, делаем:
> git checkout main
> git merge server
> git branch -d client
> git branch -d server

Делать ReBase опасно в главном проекте.
Делай для своих - не лезь выше.