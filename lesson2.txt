Основы Git.

01. История изменения файлов;
	
	> git diff - что изменили, но ещё не индексиловали (not add)
	> git diff --staged (или --cached) разница меж commited и тем, что только add (индексировано)
	> git commit -m "комент к commit"
	> git commit -v - добавляет в комментарий коммита сообщение о разнице (diff)
	> git commit -a -m "комментарий" -- ключ -а означает, что все измененные файлы комитятся.
	
	> git rm <filename> - файл помечается на удаление при следующем коммите. Его можно восстановить из прежних версий.
	> git rm -n (или --dry-run) <filename> - тестовый, черновой запуск, чтоб посмотреть к чему может привести выполнение команды 
	> git rm --cached <filename> - удалить файл из индексированных (git add), но не удалять с диска
	> git rm log/\*.bak - удаляет файлы из индекса по шаблону
	
	> git mv - переименование/перемещение файлов
	
	> git log -<n> - показать историю последних n коммитов
	> git log -<n> --patch - показывает, что именно было изменено в этих n коммитах.
	> git log --stat -<n> - показывает раницу между указанными коммитами
	> gil log --pretty=oneline -<n> - лог в одну строку для последних n коммитов. Эту команду лучше заменить следующей в списке.
	> git log --oneline -<n> - показать последние n-коммитов с их хэшами.
	> git log {hash} - посмотреть измения конкретного коммита по его хэшу.
	> git log --pretty="%h - %an, %ar : %s" -<n> , где "%" - означает, что за ним идёт управляющий символ для отображения вывода лога.
														Вся инфа по ключам есть в git log --help.
		
02. Операции отмены;
	
	> git commit --amend - непонятная хрень. Что камент менять? Да не может быть. Буду разбираться.
	> git reflog - коммиты, сделанные на локальном ПК. Инфу смотрит в логах. Позволяет посмотреть скрытые коммиты. {Скрытые командой git commit --amend?}
	> git restore --staged <filename> - исключить лишний файл из коммита.
	> git reset - аналог предыдущей команды. Но у этой есть опасный ключ --hard.
					Он отменяет все локальные изменения в файлах т.е. произойдёт возврат в предыдущему коммиту. {все git add отменятся}
	> git restore или git checkout -- <filename>. Checkout лучше - универсальнее. 
					Отменяет все изменения в рабочей диретории - удаляет измененный файл, замещая его файлом из предыдущего коммита.
		
03. Удалённые репозитории; 

	> git remote -v  - показывает подключённые удалённые репозитории
	> git remote add <repository.alias> <link_to_repository> - добавить себе локально удалённый репозиторий
	> git fetch <repository.alias> - получить свежие изменения из удалённого репозитория
	> git pull - получает свежие изменения из удалённого репозитория с помощью fetch и сразу делает merge
	> git push <repository> <ветка{branch}> - отправить локальные изменения в удалённый репозиторий
	> git remote show <имя репозитория> - просмотр удалённого репозитория
	> git checkout <имя репозитория>/<имя ветки> - связать локальную ветку <имя ветки> с такой же удалённой для её отслеживания.
													Если репозиторий один, то его имя можно не указывать.
	> git remote rename <old name> <new name> - переименование удалённого репозитория у себя на компе
	> git remote rm <имя репозитория> - удаление локального репозитория

04. Тэги (метки);
	
	


05. Killer фича - ветвления;

-------