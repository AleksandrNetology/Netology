Декабрь 2021/ Нетология.
Основы Git. 
------------------------
00. Начало;
	
	Опции конфига git'а:
	> git config --<опция>
		--system - опция, настройки которой распространяются на _всех_ пользователей системы.
		--global - опция, настройки которой распространяются на текущего пользователя.
		--local  - опция, настройки которой распространяются на конкретный репозиторий.
	Все эти настройки хранятся в отдельных конфигурационных файлах.
	
	> git config --list --show-origin - посмотреть все настройки и где она заданы.

01. История изменения файлов;

	> git status  - полный вывод статуса файлов.
	> git status -s  - сокращённый вывод статуса.
	
	> git diff - что изменили, но ещё не индексиловали (not add)
	> git diff --staged (или --cached) разница меж commited и тем, что только add (индексировано)
	> git commit -m "комент к commit"
	> git commit -v - добавляет в комментарий коммита сообщение о разнице (diff)
	> git commit -a -m "комментарий" -- ключ -а означает, что все измененные файлы комитятся.
	
	> git rm <filename> - файл помечается на удаление при следующем коммите. Его можно восстановить из прежних версий.
	> git rm -n (или --dry-run) <filename> - тестовый, черновой запуск, чтоб посмотреть к чему может привести выполнение команды 
	> git rm --cached <filename> - удалить файл из индексированных (git add), но не удалять с диска
	> git rm log/\*.bak - удаляет файлы из индекса по шаблону
	
	> git mv - переименование/перемещение файлов
	
	> git log -<n> - показать историю последних n коммитов
	> git log -<n> --patch - показывает, что именно было изменено в этих n коммитах.
	> git log --stat -<n> - показывает раницу между указанными коммитами
	> gil log --pretty=oneline -<n> - лог в одну строку для последних n коммитов. Эту команду лучше заменить следующей в списке.
	> git log --oneline -<n> - показать последние n-коммитов с их хэшами.
	> git log {hash} - посмотреть измения конкретного коммита по его хэшу.
	> git log --pretty="%h - %an, %ar : %s" -<n> , где "%" - означает, что за ним идёт управляющий символ для отображения вывода лога.
														Вся инфа по ключам есть в git log --help.
		
02. Операции отмены;
	
	> git commit --amend - добавить изменения к _последнему_ коммиту и заменить его.
	> git reflog - коммиты, сделанные на локальном ПК. Инфу смотрит в логах. Позволяет посмотреть скрытые коммиты. {Скрытые командой git commit --amend?}
	> git restore --staged <filename> - исключить лишний файл из коммита.
	> git reset - аналог предыдущей команды. Но у этой есть опасный ключ --hard.
					Он отменяет все локальные изменения в файлах т.е. произойдёт возврат в предыдущему коммиту. {все git add отменятся}
	> git restore или git checkout -- <filename>. Checkout лучше - универсальнее. 
					Отменяет все изменения в рабочей диретории - удаляет измененный файл, замещая его файлом из предыдущего коммита.
		
03. Удалённые репозитории; 

	> git remote -v  - показывает подключённые удалённые репозитории
	> git remote add <repository.alias> <link_to_repository> - добавить себе локально удалённый репозиторий
	> git fetch <repository.alias> - получить свежие изменения из удалённого репозитория
	> git pull - получает свежие изменения из удалённого репозитория с помощью fetch и сразу делает merge
	> git push <repository> <ветка{branch}> - отправить локальные изменения в удалённый репозиторий
	> git remote show <имя репозитория> - просмотр удалённого репозитория
	> git checkout <имя репозитория>/<имя ветки> - связать локальную ветку <имя ветки> с такой же удалённой для её отслеживания.
													Если репозиторий один, то его имя можно не указывать.
	> git remote rename <old name> <new name> - переименование удалённого репозитория у себя на компе
	> git remote rm <имя репозитория> - удаление локального репозитория
	
	> git remote -u <repository.alias> <ветка> - ключ '-u' значит, что этот удаленный репозиторий будет использоваться по-умолчанию 
													и не нужно будет указывать имя репозитория при git fetch/pull/push

04. Тэги (метки); Метки предназначаны для того, чтобы помечать версии, например.

	> git tag - показать все имеющиеся метки.
	> git tag -l "шаблон" - список меток по шаблону. Например: > git tag -l 'v.1.2*' , где -l является сокращением от --list
	> git tag -a <метка> -m "комментарий" - так создаётся аннотированная метка. Например: > git tag -a v0.0.1 -m "New version"
	> git show <метка> - показать содержимое аннотированного тэга.
	> git tag <метка> - создаётся легковесный тэг. {Лучше использовать аннотированные тэги - они содержат немного больше инфы: кто создал, когда и пр.}
	> git tag -a <метка> [hash коммита] - добавить метку уже существующему коммиту. Например: > git tag -a v0.01-rc 9fceb01
	> git push <repository> <метка> - отправить конкретный тэг в обозначенный репозиторий. 
	> git push <repository> --tags - отправить все метки в указанный репозиторий.
	> git tag -d <метка> - удаление метки из локального репозитория.
	> git push <repository> --delete <метка> - удаление меток из удалённого репозитория.
	
	> git branch - создать, удалить, показать ветки
	> git checkout <метка> - переход на конккретный тэг
	> git switch -c <new_branch_name> <tag> - или в следующей строке {но лучше пользоваться этой} -->
	> git checkout -b <new_branch_name> <tag>  - создать новую ветку с этого места: > git checkout <метка> 
												Если не указать название метки, то новая ветка будет создана от коммита, в котором мы сейчас находимся.
												Можно сначала сделать переход на коммит, от которого будет создана новая ветка, а можно из любого коммита,
												в котором мы сейчас стоим, начать новую ветку просто указав метку этого коммита, если оная есть.
	> git checkout <branch>	- переход между ветками.										
	
	Алиасы:
	> git config --global alias.co checkout
	> git config --global alias.br branch
	> git config --global alias.ct commit
	> git config --global alias.st status
	> git config --global alias.last 'log -1 HEAD'
	
05. Ветвления;
	
	> git log --oneline --graph --all   - показывает все ветвления проекта.
	> git switch -c <new_branch_name> - создать новую ветку проекта.
	
	> git checkout -b <new_branch_name> <hash> - создать новую ветку от указанного хэша

Пример ---------------------------------------------------------------------------------------
																# Задача в том, чтоб объединить 2 ветки main и hotfix
																# При этом hotfix просто на один шаг впереди от main.
																# Значит нам просто нужно сдвинуть указатель HEAD вперёд 
																# с последнего коммита main на коммит hotfix.
																
	HOME@iGO MINGW64 /c/Git/GitHub (main)						# Находимся в основной ветке
	$ git merge hotfix											# Объединяем ветку hotfix с основной
	Updating 59a6438..54508fa									# Происходит обновление hash
	Fast-forward												# git сообщает, что объединение произошло методом Fast-forward т.е. указатель просто переместился с последнего коммита main на коммит hotfix.
		outlines.txt | 7 ++++---								# изменения первого файла
		readme.md    | 4 +++-									# изменения второго файла
		2 files changed, 7 insertions(+), 4 deletions(-)		# total
----------------------------------------------------------------------------------------------


